/*
 * This file is generated by jOOQ.
 */
package com.product.product_details.Model.tables.records;


import com.product.product_details.Model.tables.Orders;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrdersRecord extends UpdatableRecordImpl<OrdersRecord> implements Record3<Integer, String, String> {

    private static final long serialVersionUID = 1004385893;

    /**
     * Setter for <code>public.orders.order_id</code>.
     */
    public void setOrderId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.orders.order_id</code>.
     */
    public Integer getOrderId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.orders.order_status</code>.
     */
    public void setOrderStatus(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.orders.order_status</code>.
     */
    public String getOrderStatus() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.orders.products</code>.
     */
    public void setProducts(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.orders.products</code>.
     */
    public String getProducts() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Orders.ORDERS.ORDER_ID;
    }

    @Override
    public Field<String> field2() {
        return Orders.ORDERS.ORDER_STATUS;
    }

    @Override
    public Field<String> field3() {
        return Orders.ORDERS.PRODUCTS;
    }

    @Override
    public Integer component1() {
        return getOrderId();
    }

    @Override
    public String component2() {
        return getOrderStatus();
    }

    @Override
    public String component3() {
        return getProducts();
    }

    @Override
    public Integer value1() {
        return getOrderId();
    }

    @Override
    public String value2() {
        return getOrderStatus();
    }

    @Override
    public String value3() {
        return getProducts();
    }

    @Override
    public OrdersRecord value1(Integer value) {
        setOrderId(value);
        return this;
    }

    @Override
    public OrdersRecord value2(String value) {
        setOrderStatus(value);
        return this;
    }

    @Override
    public OrdersRecord value3(String value) {
        setProducts(value);
        return this;
    }

    @Override
    public OrdersRecord values(Integer value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached OrdersRecord
     */
    public OrdersRecord() {
        super(Orders.ORDERS);
    }

    /**
     * Create a detached, initialised OrdersRecord
     */
    public OrdersRecord(Integer orderId, String orderStatus, String products) {
        super(Orders.ORDERS);

        set(0, orderId);
        set(1, orderStatus);
        set(2, products);
    }
}

/*
 * This file is generated by jOOQ.
 */
package com.product.product_details.Model.tables;


import com.product.product_details.Model.Keys;
import com.product.product_details.Model.Public;
import com.product.product_details.Model.tables.records.UserDetailsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserDetails extends TableImpl<UserDetailsRecord> {

    private static final long serialVersionUID = 1896153010;

    /**
     * The reference instance of <code>public.user_details</code>
     */
    public static final UserDetails USER_DETAILS = new UserDetails();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserDetailsRecord> getRecordType() {
        return UserDetailsRecord.class;
    }

    /**
     * The column <code>public.user_details.id</code>.
     */
    public final TableField<UserDetailsRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('user_details_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.user_details.cus_id</code>.
     */
    public final TableField<UserDetailsRecord, Integer> CUS_ID = createField(DSL.name("cus_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.user_details.ord_id</code>.
     */
    public final TableField<UserDetailsRecord, Integer> ORD_ID = createField(DSL.name("ord_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.user_details</code> table reference
     */
    public UserDetails() {
        this(DSL.name("user_details"), null);
    }

    /**
     * Create an aliased <code>public.user_details</code> table reference
     */
    public UserDetails(String alias) {
        this(DSL.name(alias), USER_DETAILS);
    }

    /**
     * Create an aliased <code>public.user_details</code> table reference
     */
    public UserDetails(Name alias) {
        this(alias, USER_DETAILS);
    }

    private UserDetails(Name alias, Table<UserDetailsRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserDetails(Name alias, Table<UserDetailsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> UserDetails(Table<O> child, ForeignKey<O, UserDetailsRecord> key) {
        super(child, key, USER_DETAILS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<UserDetailsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_USER_DETAILS;
    }

    @Override
    public List<ForeignKey<UserDetailsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserDetailsRecord, ?>>asList(Keys.USER_DETAILS__USER_DETAILS_CUS_ID_FKEY, Keys.USER_DETAILS__USER_DETAILS_ORD_ID_FKEY);
    }

    public Customers customers() {
        return new Customers(this, Keys.USER_DETAILS__USER_DETAILS_CUS_ID_FKEY);
    }

    public Orders orders() {
        return new Orders(this, Keys.USER_DETAILS__USER_DETAILS_ORD_ID_FKEY);
    }

    @Override
    public UserDetails as(String alias) {
        return new UserDetails(DSL.name(alias), this);
    }

    @Override
    public UserDetails as(Name alias) {
        return new UserDetails(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserDetails rename(String name) {
        return new UserDetails(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserDetails rename(Name name) {
        return new UserDetails(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}

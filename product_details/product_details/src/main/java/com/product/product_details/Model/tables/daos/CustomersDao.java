/*
 * This file is generated by jOOQ.
 */
package com.product.product_details.Model.tables.daos;


import com.product.product_details.Model.tables.Customers;
import com.product.product_details.Model.tables.records.CustomersRecord;

import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CustomersDao extends DAOImpl<CustomersRecord, com.product.product_details.Model.tables.pojos.Customers, Integer> {

    /**
     * Create a new CustomersDao without any configuration
     */
    public CustomersDao() {
        super(Customers.CUSTOMERS, com.product.product_details.Model.tables.pojos.Customers.class);
    }

    /**
     * Create a new CustomersDao with an attached configuration
     */
    public CustomersDao(Configuration configuration) {
        super(Customers.CUSTOMERS, com.product.product_details.Model.tables.pojos.Customers.class, configuration);
    }

    @Override
    public Integer getId(com.product.product_details.Model.tables.pojos.Customers object) {
        return object.getCustomerId();
    }

    /**
     * Fetch records that have <code>customer_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.product.product_details.Model.tables.pojos.Customers> fetchRangeOfCustomerId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Customers.CUSTOMERS.CUSTOMER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>customer_id IN (values)</code>
     */
    public List<com.product.product_details.Model.tables.pojos.Customers> fetchByCustomerId(Integer... values) {
        return fetch(Customers.CUSTOMERS.CUSTOMER_ID, values);
    }

    /**
     * Fetch a unique record that has <code>customer_id = value</code>
     */
    public com.product.product_details.Model.tables.pojos.Customers fetchOneByCustomerId(Integer value) {
        return fetchOne(Customers.CUSTOMERS.CUSTOMER_ID, value);
    }

    /**
     * Fetch records that have <code>first_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.product.product_details.Model.tables.pojos.Customers> fetchRangeOfFirstName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Customers.CUSTOMERS.FIRST_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>first_name IN (values)</code>
     */
    public List<com.product.product_details.Model.tables.pojos.Customers> fetchByFirstName(String... values) {
        return fetch(Customers.CUSTOMERS.FIRST_NAME, values);
    }

    /**
     * Fetch records that have <code>last_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.product.product_details.Model.tables.pojos.Customers> fetchRangeOfLastName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Customers.CUSTOMERS.LAST_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_name IN (values)</code>
     */
    public List<com.product.product_details.Model.tables.pojos.Customers> fetchByLastName(String... values) {
        return fetch(Customers.CUSTOMERS.LAST_NAME, values);
    }

    /**
     * Fetch records that have <code>phone_number BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.product.product_details.Model.tables.pojos.Customers> fetchRangeOfPhoneNumber(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Customers.CUSTOMERS.PHONE_NUMBER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>phone_number IN (values)</code>
     */
    public List<com.product.product_details.Model.tables.pojos.Customers> fetchByPhoneNumber(Long... values) {
        return fetch(Customers.CUSTOMERS.PHONE_NUMBER, values);
    }

    /**
     * Fetch records that have <code>location BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.product.product_details.Model.tables.pojos.Customers> fetchRangeOfLocation(String lowerInclusive, String upperInclusive) {
        return fetchRange(Customers.CUSTOMERS.LOCATION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>location IN (values)</code>
     */
    public List<com.product.product_details.Model.tables.pojos.Customers> fetchByLocation(String... values) {
        return fetch(Customers.CUSTOMERS.LOCATION, values);
    }

    /**
     * Fetch records that have <code>zipcode BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.product.product_details.Model.tables.pojos.Customers> fetchRangeOfZipcode(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Customers.CUSTOMERS.ZIPCODE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>zipcode IN (values)</code>
     */
    public List<com.product.product_details.Model.tables.pojos.Customers> fetchByZipcode(Integer... values) {
        return fetch(Customers.CUSTOMERS.ZIPCODE, values);
    }
}
